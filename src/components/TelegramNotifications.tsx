import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Switch } from '@/components/ui/switch'
import { Separator } from '@/components/ui/separator'
import { Alert, AlertDescription } from '@/components/ui/alert'
import Icon from '@/components/ui/icon'

interface TelegramConfig {
  botToken: string
  chatId: string
  isEnabled: boolean
  isConnected: boolean
}

interface AlertConfig {
  responseTimeLimit: number
  requestsPerMinuteLimit: number
  errorRateLimit: number
  uptimeThreshold: number
  enabledAlerts: {
    responseTime: boolean
    highTraffic: boolean
    errorRate: boolean
    downtime: boolean
    methodAnomalies: boolean
  }
}

const TelegramNotifications = () => {
  const [telegramConfig, setTelegramConfig] = useState<TelegramConfig>({
    botToken: '',
    chatId: '',
    isEnabled: false,
    isConnected: false
  })

  const [alertConfig, setAlertConfig] = useState<AlertConfig>({
    responseTimeLimit: 1000,
    requestsPerMinuteLimit: 10000,
    errorRateLimit: 5,
    uptimeThreshold: 95,
    enabledAlerts: {
      responseTime: true,
      highTraffic: true,
      errorRate: true,
      downtime: true,
      methodAnomalies: false
    }
  })

  const [isLoading, setIsLoading] = useState(false)
  const [testStatus, setTestStatus] = useState<'idle' | 'success' | 'error'>('idle')
  const [statusMessage, setStatusMessage] = useState('')

  // Test Telegram bot connection
  const testTelegramConnection = async () => {
    if (!telegramConfig.botToken || !telegramConfig.chatId) {
      setStatusMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ Chat ID')
      setTestStatus('error')
      return
    }

    setIsLoading(true)
    setTestStatus('idle')

    try {
      // In production, this would test the actual Telegram API
      // const response = await fetch(`https://api.telegram.org/bot${telegramConfig.botToken}/sendMessage`, {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({
      //     chat_id: telegramConfig.chatId,
      //     text: 'üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç HTTP Monitoring Dashboard'
      //   })
      // })

      // Mock success for demo
      setTimeout(() => {
        setTelegramConfig(prev => ({ ...prev, isConnected: true }))
        setTestStatus('success')
        setStatusMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
        setIsLoading(false)
      }, 2000)

    } catch (error) {
      setTestStatus('error')
      setStatusMessage('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API')
      setIsLoading(false)
    }
  }

  // Send notification function (would be called by monitoring logic)
  const sendNotification = async (message: string, type: 'warning' | 'critical' | 'info') => {
    if (!telegramConfig.isEnabled || !telegramConfig.isConnected) return

    const emojis = {
      warning: '‚ö†Ô∏è',
      critical: 'üö®',
      info: '‚ÑπÔ∏è'
    }

    const fullMessage = `${emojis[type]} HTTP Monitor Alert\n\n${message}\n\nüìä Dashboard: ${window.location.origin}`

    try {
      // In production:
      // await fetch(`https://api.telegram.org/bot${telegramConfig.botToken}/sendMessage`, {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({
      //     chat_id: telegramConfig.chatId,
      //     text: fullMessage,
      //     parse_mode: 'Markdown'
      //   })
      // })
      console.log('Notification sent:', fullMessage)
    } catch (error) {
      console.error('Failed to send notification:', error)
    }
  }

  // Mock alert checks (in production, this would be called by monitoring service)
  useEffect(() => {
    if (!telegramConfig.isEnabled) return

    const checkAlerts = () => {
      // Mock some alert conditions for demo
      const mockStats = {
        responseTime: Math.floor(Math.random() * 2000) + 100,
        requestsPerMinute: Math.floor(Math.random() * 15000) + 5000,
        errorRate: Math.random() * 10,
        uptime: 99.8
      }

      // Check response time
      if (alertConfig.enabledAlerts.responseTime && mockStats.responseTime > alertConfig.responseTimeLimit) {
        sendNotification(
          `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${mockStats.responseTime}ms (–ª–∏–º–∏—Ç: ${alertConfig.responseTimeLimit}ms)`,
          'warning'
        )
      }

      // Check high traffic
      if (alertConfig.enabledAlerts.highTraffic && mockStats.requestsPerMinute > alertConfig.requestsPerMinuteLimit) {
        sendNotification(
          `–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${mockStats.requestsPerMinute} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω (–ª–∏–º–∏—Ç: ${alertConfig.requestsPerMinuteLimit})`,
          'warning'
        )
      }

      // Check error rate
      if (alertConfig.enabledAlerts.errorRate && mockStats.errorRate > alertConfig.errorRateLimit) {
        sendNotification(
          `–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: ${mockStats.errorRate.toFixed(1)}% (–ª–∏–º–∏—Ç: ${alertConfig.errorRateLimit}%)`,
          'critical'
        )
      }
    }

    const interval = setInterval(checkAlerts, 60000) // Check every minute
    return () => clearInterval(interval)
  }, [telegramConfig.isEnabled, alertConfig])

  return (
    <div className="space-y-6">
      
      {/* Telegram Bot Configuration */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="MessageCircle" size={20} className="text-blue-500" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
            {telegramConfig.isConnected && (
              <Badge className="bg-green-500/20 text-green-500 border-green-500">
                <Icon name="CheckCircle" size={14} className="mr-1" />
                –ü–æ–¥–∫–ª—é—á–µ–Ω
              </Badge>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          
          <Alert className="bg-blue-500/10 border-blue-500/20">
            <Icon name="Info" size={16} />
            <AlertDescription className="text-sm">
              <strong>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</strong><br />
              1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram<br />
              2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∏–∂–µ<br />
              3. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à Chat ID —á–µ—Ä–µ–∑ @userinfobot<br />
              4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            </AlertDescription>
          </Alert>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="botToken">–¢–æ–∫–µ–Ω –±–æ—Ç–∞</Label>
              <Input
                id="botToken"
                type="password"
                placeholder="123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
                value={telegramConfig.botToken}
                onChange={(e) => setTelegramConfig(prev => ({ ...prev, botToken: e.target.value }))}
                className="font-mono text-sm"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="chatId">Chat ID</Label>
              <Input
                id="chatId"
                placeholder="123456789"
                value={telegramConfig.chatId}
                onChange={(e) => setTelegramConfig(prev => ({ ...prev, chatId: e.target.value }))}
                className="font-mono"
              />
            </div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Switch
                id="enableTelegram"
                checked={telegramConfig.isEnabled}
                onCheckedChange={(checked) => setTelegramConfig(prev => ({ ...prev, isEnabled: checked }))}
              />
              <Label htmlFor="enableTelegram">–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
            </div>
            
            <Button 
              onClick={testTelegramConnection}
              disabled={isLoading || !telegramConfig.botToken || !telegramConfig.chatId}
              variant="outline"
              className="border-border hover:border-primary/50"
            >
              {isLoading ? (
                <Icon name="RefreshCw" size={16} className="mr-2 animate-spin" />
              ) : (
                <Icon name="Send" size={16} className="mr-2" />
              )}
              –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            </Button>
          </div>

          {testStatus !== 'idle' && (
            <Alert className={testStatus === 'success' ? 'bg-green-500/10 border-green-500/20' : 'bg-red-500/10 border-red-500/20'}>
              <Icon name={testStatus === 'success' ? 'CheckCircle' : 'AlertCircle'} size={16} />
              <AlertDescription>{statusMessage}</AlertDescription>
            </Alert>
          )}

        </CardContent>
      </Card>

      {/* Alert Configuration */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="Bell" size={20} className="text-orange-500" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          
          {/* Alert Types */}
          <div className="space-y-4">
            <h4 className="font-medium text-foreground">–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Icon name="Zap" size={16} className="text-yellow-500" />
                  <div>
                    <p className="font-medium">–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞</p>
                    <p className="text-sm text-muted-foreground">–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞</p>
                  </div>
                </div>
                <Switch
                  checked={alertConfig.enabledAlerts.responseTime}
                  onCheckedChange={(checked) => setAlertConfig(prev => ({
                    ...prev,
                    enabledAlerts: { ...prev.enabledAlerts, responseTime: checked }
                  }))}
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Icon name="TrendingUp" size={16} className="text-blue-500" />
                  <div>
                    <p className="font-medium">–í—ã—Å–æ–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫</p>
                    <p className="text-sm text-muted-foreground">–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏</p>
                  </div>
                </div>
                <Switch
                  checked={alertConfig.enabledAlerts.highTraffic}
                  onCheckedChange={(checked) => setAlertConfig(prev => ({
                    ...prev,
                    enabledAlerts: { ...prev.enabledAlerts, highTraffic: checked }
                  }))}
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Icon name="AlertTriangle" size={16} className="text-red-500" />
                  <div>
                    <p className="font-medium">–£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫</p>
                    <p className="text-sm text-muted-foreground">–ü—Ä–∏ —Ä–æ—Å—Ç–µ –æ—à–∏–±–æ–∫ 4xx/5xx</p>
                  </div>
                </div>
                <Switch
                  checked={alertConfig.enabledAlerts.errorRate}
                  onCheckedChange={(checked) => setAlertConfig(prev => ({
                    ...prev,
                    enabledAlerts: { ...prev.enabledAlerts, errorRate: checked }
                  }))}
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Icon name="WifiOff" size={16} className="text-purple-500" />
                  <div>
                    <p className="font-medium">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</p>
                    <p className="text-sm text-muted-foreground">–ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –∞–ø—Ç–∞–π–º–∞</p>
                  </div>
                </div>
                <Switch
                  checked={alertConfig.enabledAlerts.downtime}
                  onCheckedChange={(checked) => setAlertConfig(prev => ({
                    ...prev,
                    enabledAlerts: { ...prev.enabledAlerts, downtime: checked }
                  }))}
                />
              </div>

              <div className="flex items-center justify-between md:col-span-2">
                <div className="flex items-center space-x-3">
                  <Icon name="Activity" size={16} className="text-green-500" />
                  <div>
                    <p className="font-medium">–ê–Ω–æ–º–∞–ª–∏–∏ –º–µ—Ç–æ–¥–æ–≤</p>
                    <p className="text-sm text-muted-foreground">–ü—Ä–∏ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö HTTP –º–µ—Ç–æ–¥–æ–≤</p>
                  </div>
                </div>
                <Switch
                  checked={alertConfig.enabledAlerts.methodAnomalies}
                  onCheckedChange={(checked) => setAlertConfig(prev => ({
                    ...prev,
                    enabledAlerts: { ...prev.enabledAlerts, methodAnomalies: checked }
                  }))}
                />
              </div>

            </div>
          </div>

          <Separator />

          {/* Alert Thresholds */}
          <div className="space-y-4">
            <h4 className="font-medium text-foreground">–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              
              <div className="space-y-2">
                <Label htmlFor="responseTimeLimit">–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (–º—Å)</Label>
                <Input
                  id="responseTimeLimit"
                  type="number"
                  value={alertConfig.responseTimeLimit}
                  onChange={(e) => setAlertConfig(prev => ({ ...prev, responseTimeLimit: parseInt(e.target.value) || 0 }))}
                  className="text-center"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="requestsLimit">–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É</Label>
                <Input
                  id="requestsLimit"
                  type="number"
                  value={alertConfig.requestsPerMinuteLimit}
                  onChange={(e) => setAlertConfig(prev => ({ ...prev, requestsPerMinuteLimit: parseInt(e.target.value) || 0 }))}
                  className="text-center"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="errorRateLimit">–£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ (%)</Label>
                <Input
                  id="errorRateLimit"
                  type="number"
                  step="0.1"
                  value={alertConfig.errorRateLimit}
                  onChange={(e) => setAlertConfig(prev => ({ ...prev, errorRateLimit: parseFloat(e.target.value) || 0 }))}
                  className="text-center"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="uptimeThreshold">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–ø—Ç–∞–π–º (%)</Label>
                <Input
                  id="uptimeThreshold"
                  type="number"
                  step="0.1"
                  value={alertConfig.uptimeThreshold}
                  onChange={(e) => setAlertConfig(prev => ({ ...prev, uptimeThreshold: parseFloat(e.target.value) || 0 }))}
                  className="text-center"
                />
              </div>

            </div>
          </div>

          <Separator />

          {/* Test Notification */}
          <div className="flex items-center justify-between">
            <div>
              <h4 className="font-medium text-foreground">–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h4>
              <p className="text-sm text-muted-foreground">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram</p>
            </div>
            
            <Button 
              onClick={() => sendNotification('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç HTTP Monitoring Dashboard', 'info')}
              disabled={!telegramConfig.isEnabled || !telegramConfig.isConnected}
              variant="outline"
              className="border-border hover:border-primary/50"
            >
              <Icon name="MessageSquare" size={16} className="mr-2" />
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç
            </Button>
          </div>

        </CardContent>
      </Card>

      {/* Recent Notifications */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="History" size={20} className="text-green-500" />
            –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            
            {/* Mock recent notifications */}
            {[
              { time: '2 –º–∏–Ω –Ω–∞–∑–∞–¥', message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: 1250ms', type: 'warning' },
              { time: '15 –º–∏–Ω –Ω–∞–∑–∞–¥', message: '–°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–ø—Ç–∞–π–º: 99.8%', type: 'info' },
              { time: '1 —á–∞—Å –Ω–∞–∑–∞–¥', message: '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: 12000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω', type: 'warning' },
              { time: '3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥', message: '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram —É—Å–ø–µ—à–µ–Ω', type: 'info' }
            ].map((notification, index) => {
              const colors = {
                warning: 'text-orange-500 bg-orange-500/10',
                info: 'text-blue-500 bg-blue-500/10',
                critical: 'text-red-500 bg-red-500/10'
              }
              
              return (
                <div key={index} className="flex items-start gap-3 p-3 rounded-lg bg-muted/50">
                  <div className={`w-2 h-2 rounded-full mt-2 ${colors[notification.type as keyof typeof colors]}`} />
                  <div className="flex-1">
                    <p className="text-sm font-medium">{notification.message}</p>
                    <p className="text-xs text-muted-foreground">{notification.time}</p>
                  </div>
                </div>
              )
            })}

            <div className="text-center pt-2">
              <Button variant="ghost" size="sm" className="text-muted-foreground hover:text-foreground">
                <Icon name="MoreHorizontal" size={16} className="mr-2" />
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
              </Button>
            </div>

          </div>
        </CardContent>
      </Card>

    </div>
  )
}

export default TelegramNotifications